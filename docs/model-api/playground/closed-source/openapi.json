{
  "openapi": "3.0.3",
  "info": {
    "title": "Closed Source Model API",
    "description": "# ðŸš€ Get started here\n\nGuides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\nâœ¨ Link to [Bytez GitHub README.md](https://github.com/Bytez-com/docs).",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.bytez.com",
      "description": "Production server"
    }
  ],
  "paths": {
    "/models/v2/openai/{model}": {
      "post": {
        "summary": "OpenAI",
        "description": "Send requests to any OpenAI model by specifying the `{model}` placeholder in the path.",
        "operationId": "openaiModels",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The specific OpenAI model to interact with (e.g., `gpt-4o-mini`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Send messages to the specified OpenAI model.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "Messages to process.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": { "type": "string" },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Enable or disable streaming responses."
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "max_tokens": { "type": "integer", "description": "Maximum tokens in the response." }
                    }
                  }
                },
                "required": ["messages", "params"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response from the specified OpenAI model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": { "type": "string", "description": "Model output text." }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [], "providerKeyAuth": [] }]
      }
    },
    "/models/v2/google/{model}": {
      "post": {
        "summary": "Google",
        "description": "Send requests to any Google model by specifying the `{model}` placeholder in the path.",
        "operationId": "googleModels",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The specific Google model to interact with (e.g., `gemini-1.5-flash`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Send messages to the specified Google model.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "Messages to process.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": { "type": "string" },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Enable or disable streaming responses."
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "temperature": { "type": "number" },
                      "topP": { "type": "number" },
                      "topK": { "type": "integer" },
                      "candidateCount": { "type": "integer" },
                      "maxOutputTokens": { "type": "integer" },
                      "presencePenalty": { "type": "number" },
                      "frequencyPenalty": { "type": "number" }
                    }
                  }
                },
                "required": ["messages", "params"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response from the specified Google model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": { "type": "string", "description": "Model output text." }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [], "providerKeyAuth": [] }]
      }
    },
    "/models/v2/cohere/{model}": {
      "post": {
        "summary": "Cohere",
        "description": "Send requests to any Cohere model by specifying the `{model}` placeholder in the path.",
        "operationId": "cohereModels",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The specific Cohere model to interact with (e.g., `command-r`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Send messages to the specified Cohere model.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "Messages to process.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": { "type": "string" },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Enable or disable streaming responses."
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "max_tokens": { "type": "integer", "description": "Maximum tokens in the response." }
                    }
                  }
                },
                "required": ["messages", "params"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response from the specified Cohere model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": { "type": "string", "description": "Model output text." }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [], "providerKeyAuth": [] }]
      }
    },
    "/models/v2/anthropic/{model}": {
      "post": {
        "summary": "Anthropic",
        "description": "Send requests to any Anthropic model by specifying the `{model}` placeholder in the path.",
        "operationId": "anthropicModels",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The specific Anthropic model to interact with (e.g., `claude-3-haiku-20240307`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Send messages to the specified Anthropic model.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "Messages to process.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": { "type": "string" },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Enable or disable streaming responses."
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "max_tokens": { "type": "integer", "description": "Maximum tokens in the response." }
                    }
                  }
                },
                "required": ["messages", "params"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response from the specified Anthropic model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": { "type": "string", "description": "Model output text." }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [], "providerKeyAuth": [] }]
      }
    },
    "/models/v2/mistral/{model}": {
      "post": {
        "summary": "Mistral",
        "description": "Send requests to any Mistral model by specifying the `{model}` placeholder in the path.",
        "operationId": "mistralModels",
        "parameters": [
          {
            "name": "model",
            "in": "path",
            "required": true,
            "description": "The specific Mistral model to interact with (e.g., `mistral-small-latest`).",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Send messages to the specified Mistral model.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "type": "array",
                    "description": "Messages to process.",
                    "items": {
                      "type": "object",
                      "properties": {
                        "role": { "type": "string" },
                        "content": { "type": "string" }
                      },
                      "required": ["role", "content"]
                    }
                  },
                  "stream": {
                    "type": "boolean",
                    "description": "Enable or disable streaming responses."
                  },
                  "params": {
                    "type": "object",
                    "properties": {
                      "max_tokens": { "type": "integer", "description": "Maximum tokens in the response." }
                    }
                  }
                },
                "required": ["messages", "params"]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response from the specified Mistral model.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "output": { "type": "string", "description": "Model output text." }
                  }
                }
              }
            }
          }
        },
        "security": [{ "apiKeyAuth": [], "providerKeyAuth": []}]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "apiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Authorization",
        "description": "Provide your API key as `Key your-key-here` in the `Authorization` header."
      },
      "providerKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Provider-Key",
        "description": "Provide your provider API key as `Provider-Key your-provider-key-here` in the header."
      }
    }
  }
}
