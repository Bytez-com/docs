---
openapi: 3.0.3
info:
  title: Useful Functions & Model Library
  description: Explore available models and tasks.
  version: 1.0.0
servers:
  - url: https://api.bytez.com
    description: Production server

paths:
  "/models/v2/list/clusters":
    get:
      summary: Clusters
      description: List your open-source models that are on live clusters
      operationId: getClusters
      responses:
        "200":
          description: List your clusters
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: null
                    description: Null if everything is fine
                  output:
                    type: array
                    description: An array of your clusters
                    items:
                      type: object
                      properties:
                        modelId:
                          type: string
                          example: stabilityai/stable-diffusion-xl-base-1.0
                        status:
                          type: string
                          example: booting instance
                        created:
                          type: string
                          format: date-time
                          example: 2025-04-22T17:57:40.036Z
                        modified:
                          type: string
                          format: date-time
                          example: 2025-04-22T17:57:58.638Z
                        timeout:
                          type: integer
                          example: 5
                        capacity:
                          type: object
                          properties:
                            min:
                              type: integer
                              example: 0
                            desired:
                              type: integer
                              example: 1
                            max:
                              type: integer
                              example: 1
                          required:
                            - min
                            - desired
                            - max
                        instances:
                          type: integer
                          example: 1
                        inferences:
                          type: integer
                          example: 0
                        lastInference:
                          type: string
                          format: date-time
                          example: 2025-04-22T17:57:40.036Z
                      required:
                        - modelId
                        - status
                        - created
                        - modified
                        - timeout
                        - capacity
                        - instances
                        - inferences
                        - lastInference
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimitError"
      security:
        - apiKeyAuth: []

  "/models/v2/list/models":
    get:
      summary: Models
      description: >
        Retrieve a list of available models for various tasks. Use the query
        parameter `task` to filter by task type, e.g. `chat`.
      operationId: getModels
      parameters:
        - name: task
          in: query
          description: |-
            The specific task type to filter models. Run list.tasks() for the full list. Some supported tasks include:
            `audio-classification`, `audio-text-to-text`, `automatic-speech-recognition`, `chat`, `depth-estimation`, `document-question-answering`, `feature-extraction`, `fill-mask`, `image-classification`, `image-feature-extraction`, `image-segmentation`, `image-text-to-text`, `image-to-text`, `mask-generation`, `object-detection`, `question-answering`, `sentence-similarity`, `summarization`, `text-classification`, `text-generation`, `text-to-audio`, `text-to-image`, `text-to-speech`, `text-to-video`, `text2text-generation`, `token-classification`, `translation`, `unconditional-image-generation`, `video-classification`, `video-text-to-text`, `visual-question-answering`, `zero-shot-classification`, `zero-shot-image-classification`, `zero-shot-object-detection`.
          required: false
          schema:
            type: string
            example: chat
      responses:
        "200":
          description: A successful response containing the list of models.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: null
                    description: Null if everything is fine
                  output:
                    type: array
                    description: An array of models
                    items:
                      type: object
                      properties:
                        meter:
                          type: string
                          example: sm-free
                          description: The meter is based on GPU RAM required
                        meterPrice:
                          type: string
                          example: "0.0006478333 / sec"
                          description: Price per second to run model
                        modelId:
                          type: string
                          example: 0-hero/Matter-0.1-Slim-7B-C
                        params:
                          type: number
                          example: 7.24
                          description: Number of parameters in billions
                        ramRequired:
                          type: number
                          example: 29
                          description: GPU RAM required in GB
                        task:
                          type: string
                          example: chat
                      required:
                        - meter
                        - meterPrice
                        - modelId
                        - params
                        - ramRequired
                        - task
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimitError"
      security:
        - apiKeyAuth: []

  "/models/v2/list/tasks":
    get:
      summary: Tasks
      description: Retrieve a list of tasks
      operationId: getTasks
      responses:
        "200":
          description: A successful response containing the list of tasks.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: null
                    description: Null if everything is fine
                  output:
                    type: array
                    description: An array of tasks
                    items:
                      type: string
        "401":
          $ref: "#/components/responses/Unauthorized"
        "429":
          $ref: "#/components/responses/RateLimitError"
      security:
        - apiKeyAuth: []

components:
  responses:
    RateLimitError:
      description: Too Many Requests â€“ You have hit the rate limit.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Rate limit exceeded"
              output:
                type: string
                example: null
    Unauthorized:
      description: Auth error - check your api key and how you're sending it.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Unauthorized"
              output:
                type: string
                example: null
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: >
        Set `Authorization` header to `Key BYTEZ_KEY` (e.g. 'Authorization':
        'Key ABC123')
