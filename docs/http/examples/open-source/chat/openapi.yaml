openapi: 3.0.3
info:
  title: Open Source AI Models API – Multimodal
  description: API for running open-source AI models that take text, vision, audio, and video as input.
  version: 1.0.0

servers:
  - url: https://api.bytez.com
    description: Production server

paths:
  /models/v2/microsoft/Phi-3-mini-4k-instruct:
    post:
      summary: chat
      description: Generate text with the Phi-3-mini-4k-instruct model.
      operationId: textGeneration
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful text-generation response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSuccessResponseSchema'
      security:
        - apiKeyAuth: []

  /models/v2/meta-llama/Llama-3.2-11B-Vision-Instruct:
    post:
      summary: image-text-to-text
      description: Analyze images with Llama-3.2-11B-Vision-Instruct.
      operationId: visionAnalysis
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful vision-analysis response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSuccessResponseSchema'
      security:
        - apiKeyAuth: []

  /models/v2/Qwen/Qwen2-Audio-7B-Instruct:
    post:
      summary: audio-text-to-text
      description: Analyze audio with Qwen2-Audio-7B-Instruct.
      operationId: audioAnalysis
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful audio-analysis response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSuccessResponseSchema'
      security:
        - apiKeyAuth: []

  /models/v2/llava-hf/LLaVA-NeXT-Video-7B-hf:
    post:
      summary: video-text-to-text
      description: Analyze video with LLaVA-NeXT-Video-7B-hf.
      operationId: videoAnalysis
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful video-analysis response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSuccessResponseSchema'
      security:
        - apiKeyAuth: []

# ───────────────────────────── Components ─────────────────────────────
components:
  # ---------- Schemas ----------
  schemas:
    UniversalRequestBodySchema:
      type: object
      properties:
        messages:
          type: array
          description: Conversation history.
          items:
            type: object
            required: [role, content]
            properties:
              role: { type: string, enum: [system, user, assistant] }
              content:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: object
                      required: [type]
                      properties:
                        type: { type: string, enum: [text, image, audio, video] }
                        text: { type: string }
                        url: { type: string, format: uri }
                        base64: { type: string }
        stream: { type: boolean, description: Enable text streaming. }
        params:
          type: object
          description: Model-specific parameters.
          properties:
            min_length:
              type: integer
              description: Minimum length of the generated text.
              example: 10
            max_length:
              type: integer
              description: Maximum length of the generated text.
              example: 100
            temperature:
              type: number
              format: float
              description: Sampling temperature. Higher values = more random output.
              example: 0.5

    ChatSuccessResponseSchema:
      type: object
      required: [error, output]
      properties:
        error:
          type: string
          nullable: true
          description: Null on success; otherwise an error message.
        output:
          type: array
          format: uri
          description: The URL of the generated image.
          example:
            {
              generated_text:
                [
                  { role: 'system', content: 'You are an agent that responds like a pirate' },
                  { role: 'user', content: 'Aaaaaaaargh matey' },
                ],
            }

  # ---------- Request Bodies ----------
  requestBodies:
    UniversalRequestBody:
      description: Universal schema supporting text, chat, image, audio, video, QA, zero-shot, etc.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalRequestBodySchema'

  # ---------- Security ----------
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: >
        Set `Authorization` header to `BYTEZ_KEY` 

        ```
        'Authorization: YOUR_KEY_HERE'
        ```
