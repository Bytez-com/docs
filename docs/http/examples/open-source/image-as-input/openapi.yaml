openapi: 3.0.3
info:
  title: Open Source AI Models API – Image as Input
  description: API for running open-source AI models that take images as input across various tasks.
  version: 1.0.0

servers:
  - url: https://api.bytez.com
    description: Production server

paths:
  /models/v2/captioner/caption-gen:
    post:
      summary: Image to Text
      description: Generate captions for images using the `caption-gen` model.
      operationId: imageToText
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with a generated caption.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: A cat sitting on a windowsill.
      security:
        - apiKeyAuth: []

  /models/v2/akahana/vit-base-cats-vs-dogs:
    post:
      summary: Image Classification
      description: Classify images into categories using the `vit-base-cats-vs-dogs` model.
      operationId: imageClassification
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with a classification label.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: Cat
      security:
        - apiKeyAuth: []

  /models/v2/apple/deeplabv3-mobilevit-small:
    post:
      summary: Image Segmentation
      description: Perform image segmentation using the `deeplabv3-mobilevit-small` model.
      operationId: imageSegmentation
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with segmentation results (URL to the result).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: https://api.bytez.com/segmentation-result.png
      security:
        - apiKeyAuth: []

  /models/v2/depth-anything/Depth-Anything-V2-Base-hf:
    post:
      summary: Depth Estimation
      description: Estimate depth in images using the `Depth-Anything-V2-Base-hf` model.
      operationId: depthEstimation
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with depth estimation results (URL to the result).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: https://api.bytez.com/depth-map-result.png
      security:
        - apiKeyAuth: []

  /models/v2/aisak-ai/aisak-detect:
    post:
      summary: Object Detection
      description: Detect objects in an image using the `aisak-detect` model.
      operationId: objectDetection
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with detected objects.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output:
                  - score: 0.992
                    label: donut
                    box: { xmin: 0, ymin: 1, xmax: 997, ymax: 656 }
      security:
        - apiKeyAuth: []

  /models/v2/ahishamm/skinsam:
    post:
      summary: Mask Generation
      description: Generate a mask for the given image using the `skinsam` model.
      operationId: maskGeneration
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the mask image URL.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: https://api.bytez.com/mask-result.png
      security:
        - apiKeyAuth: []

  /models/v2/facebook/dinov2-base:
    post:
      summary: Image Feature Extraction
      description: Extract features from an image using the `dinov2-base` model.
      operationId: imageFeatureExtraction
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with extracted features.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericSuccessResponseSchema'
              example:
                error: null
                output: [0.23, 0.45, 0.89, 0.67]
      security:
        - apiKeyAuth: []

# ───────────────────────────── Components ─────────────────────────────
components:
  # ---------- Schemas ----------
  schemas:
    UniversalRequestBodySchema: # ← Imported from earlier spec
      type: object
      properties:
        text:
          type: string
          description: Input text for NLP tasks.
        messages:
          type: array
          description: Conversation history.
          items:
            type: object
            required: [role, content]
            properties:
              role:
                type: string
                enum: [system, user, assistant]
              content:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: object
                      required: [type]
                      properties:
                        type:
                          type: string
                          enum: [text, image, audio, video]
                        text:
                          type: string
                        url:
                          type: string
                          format: uri
                        base64:
                          type: string
        url:
          type: string
          format: uri
          description: URL to image/audio/video.
        base64:
          type: string
          description: Base64-encoded image/audio/video.
        question:
          type: string
          description: Question for QA tasks.
        context:
          type: string
          description: Context paragraph for QA.
        candidate_labels:
          type: array
          items: { type: string }
          description: Candidate labels for zero-shot.
        stream:
          type: boolean
          description: Enable text streaming.
        json:
          type: boolean
          description: Stream media instead of JSON.
        params:
          type: object
          description: Model-specific parameters.
          properties:
            min_length: { type: integer }
            max_length: { type: integer }
            temperature: { type: number }

    GenericSuccessResponseSchema:
      type: object
      required: [error, output]
      properties:
        error:
          type: string
          nullable: true
          description: Null on success; otherwise error message.
        output:
          description: Model-specific output.

  # ---------- Request Bodies ----------
  requestBodies:
    UniversalRequestBody:
      description: Universal schema supporting text, chat, image, audio, QA, zero-shot, etc.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalRequestBodySchema'

  # ---------- Security ----------
  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: >
        Set `Authorization` header to `Key BYTEZ_KEY` (e.g. 'Authorization': 'Key ABC123')
