openapi: 3.0.3
info:
  title: Open Source AI Models API – Text-Input Examples
  description: Explore API endpoints for running specific open-source AI models across various tasks.
  version: 1.0.0

servers:
  - url: https://api.bytez.com
    description: Production server

paths:
  /models/v2/almanach/camembert-base:
    post:
      summary: Fill Mask
      description: Predict masked tokens with the `camembert-base` model.
      operationId: runFillMask
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with predictions for the masked token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output:
                    type: array
                    items:
                      type: object
                      properties:
                        score: { type: number }
                        token: { type: integer }
                        token_str: { type: string }
                        sequence: { type: string }
              example:
                output:
                  - { score: 0.85, token: 83, token_str: world, sequence: 'Hello world!' }
                  - { score: 0.10, token: 84, token_str: there, sequence: 'Hello there!' }
      security:
        - apiKeyAuth: []

  /models/v2/facebook/mms-tts-eng:
    post:
      summary: Text-to-Speech
      description: Convert text to speech with `mms-tts-eng`.
      operationId: runTextToSpeech
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the generated audio link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: https://api.bytez.com/audio/1234567890 }
      security:
        - apiKeyAuth: []

  /models/v2/facebook/musicgen-melody:
    post:
      summary: Text-to-Audio
      description: Convert text to audio with `musicgen-melody`.
      operationId: runTextToAudio
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the generated audio link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: https://api.bytez.com/audio/1234567890 }
      security:
        - apiKeyAuth: []

  /models/v2/stabilityai/stable-diffusion-xl-base-1.0:
    post:
      summary: Text-to-Image
      description: Generate images from text with `stable-diffusion-xl-base-1.0`.
      operationId: runTextToImage
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the generated image link.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: https://api.bytez.com/image/1234567890 }
      security:
        - apiKeyAuth: []

  /models/v2/Areeb123/En-Fr_Translation_Model:
    post:
      summary: Translation
      description: Translate English to French with `En-Fr_Translation_Model`.
      operationId: runTranslation
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the translated text.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: Bonjour }
      security:
        - apiKeyAuth: []

  /models/v2/ainize/bart-base-cnn:
    post:
      summary: Summarization
      description: Summarize text with `bart-base-cnn`.
      operationId: runSummarization
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the summary.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: The Eiffel Tower is the tallest structure in Paris. }
      security:
        - apiKeyAuth: []

  /models/v2/allenai/specter2_base:
    post:
      summary: Feature Extraction
      description: Extract text features with `specter2_base`.
      operationId: runFeatureExtraction
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with extracted features.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output:
                    type: array
                    items: { type: number }
              example: { output: [0.1, 0.2, 0.3, 0.4] }
      security:
        - apiKeyAuth: []

  /models/v2/AdamCodd/distilbert-base-uncased-finetuned-sentiment-amazon:
    post:
      summary: Text Classification
      description: Classify sentiment with `distilbert-base-uncased-finetuned-sentiment-amazon`.
      operationId: runTextClassification
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with the classification.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: positive }
      security:
        - apiKeyAuth: []

  /models/v2/2rtl3/mn-xlm-roberta-base-named-entity:
    post:
      summary: Token Classification
      description: Named-entity recognition with `mn-xlm-roberta-base-named-entity`.
      operationId: runTokenClassification
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with classified tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output:
                    type: array
                    items:
                      type: object
                      properties:
                        token: { type: string }
                        label: { type: string }
              example:
                output:
                  - { token: Paris, label: LOCATION }
                  - { token: France, label: LOCATION }
      security:
        - apiKeyAuth: []

  /models/v2/bigscience/mt0-small:
    post:
      summary: Text-to-Text Generation
      description: Perform text-to-text transformations with `mt0-small`.
      operationId: runText2TextGeneration
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with generated text.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: Bonjour }
      security:
        - apiKeyAuth: []

  /models/v2/openai-community/gpt2:
    post:
      summary: Text Generation
      description: Generate text with `gpt2`.
      operationId: runTextGeneration
      requestBody:
        $ref: '#/components/requestBodies/UniversalRequestBody'
      responses:
        '200':
          description: Successful response with generated text.
          content:
            application/json:
              schema:
                type: object
                properties:
                  output: { type: string }
              example: { output: 'Humpty Dumpty sat on a wall, enjoying the view.' }
      security:
        - apiKeyAuth: []

# ───────────────────────────── Components ─────────────────────────────
components:
  schemas:
    UniversalRequestBodySchema:
      type: object
      properties:
        text: { type: string, description: Input text for NLP tasks. }
        messages:
          type: array
          description: Conversation history.
          items:
            type: object
            required: [role, content]
            properties:
              role: { type: string, enum: [system, user, assistant] }
              content:
                oneOf:
                  - type: string
                  - type: array
                    items:
                      type: object
                      required: [type]
                      properties:
                        type: { type: string, enum: [text, image, audio, video] }
                        text: { type: string }
                        url: { type: string, format: uri }
                        base64: { type: string }
        url: { type: string, format: uri, description: URL to image/audio/video. }
        base64: { type: string, description: Base64-encoded image/audio/video. }
        question: { type: string, description: Question text (QA tasks). }
        context: { type: string, description: Context paragraph (QA tasks). }
        candidate_labels:
          type: array
          items: { type: string }
          description: Candidate labels (zero-shot).
        stream: { type: boolean, description: Enable text streaming. }
        json: { type: boolean, description: Stream media instead of JSON. }
        params:
          type: object
          description: Model-specific parameters.
          properties:
            min_length: { type: integer }
            max_length: { type: integer }
            temperature: { type: number }

  requestBodies:
    UniversalRequestBody:
      description: Universal schema supporting text, chat, image, audio, video, QA, zero-shot, etc.
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UniversalRequestBodySchema'

  securitySchemes:
    apiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
      description: >
        Set `Authorization` header to `Key BYTEZ_KEY` (e.g. 'Authorization': 'Key ABC123')
